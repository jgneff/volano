/*
 * Copyright (C) 1996-1998 John Neffenger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package COM.volano.chat.client;

import java.awt.*;
import COM.volano.awt.*;
import COM.volano.Server;
import COM.volano.WebVolanoChat;
import java.io.*;
import java.util.*;
import COM.volano.chat.*;

/**
 *  Defines a private chat window in the WebVolanoChat applet.
 *
 *  <P>This component sends events to some other component, known
 *  as the controller.  Specifically, the controller compoennt will
 *  recieve <CODE>WINDOW_DESTROY</CODE> when the user closes a
 *  private chat room and <CODE>ACTION_EVENT</CODE> events when the user
 *  types chat text and presses enter.
 */
public class WebPrivateRoom extends Frame {
    private static final int MESSAGE_FIELD_COLUMNS = 60;

    final private static String BLANK = "";

    // private FormattedTextArea area = new FormattedTextArea(WebPublicRoom.CAPACITY);
    // private TextPanel area = TextPanel.getInstance();
    private TextPanel area;
    private ControlledTextField field;

    private int roomId;             // unique id of this private chat room
    private String username;        // username of other user in the chat room
    private Value value;            // most of our state
    private Component controller;   // the controller component
    private boolean open = true;    // whether or not the chat room is open
    private Focus focus;            // tracks the keyboard focus

    /**
     *  Constructs a new WebPrivateRoom.
     *
     *  @param value      The <CODE>Value</CODE> object that defines most of
     *                    the state used by the private room.
     *  @param controller The component that will receive events from
     *                    this private room.
     */
    public WebPrivateRoom(Value value, Component controller) {
        this.value = value;
        this.controller = controller;

        area = TextPanel.getInstance(value.javaVersion, value.textareaSwingForce);
        field = new ControlledTextField(MESSAGE_FIELD_COLUMNS);
        field.setLimit(value.lengthChattext);
        field.setDelay(value.delayKeystroke);
        field.setIgnoreAlt(value.keyIgnoreAlt);
        field.setIgnoreCtrl(value.keyIgnoreCtrl);
        field.setIgnoreMeta(value.keyIgnoreMeta);
        field.setIgnoreShift(value.keyIgnoreShift);
        field.enableHistory(value.historyEnable);
        field.addMacro(Event.F1, value.textF1);
        field.addMacro(Event.F2, value.textF2);
        field.addMacro(Event.F3, value.textF3);
        field.addMacro(Event.F4, value.textF4);
        field.addMacro(Event.F5, value.textF5);
        field.addMacro(Event.F6, value.textF6);
        field.addMacro(Event.F7, value.textF7);
        field.addMacro(Event.F8, value.textF8);
        field.addMacro(Event.F9, value.textF9);
        field.addMacro(Event.F10, value.textF10);
        field.addMacro(Event.F11, value.textF11);
        field.addMacro(Event.F12, value.textF12);

        focus = new Focus(field);
        focus.add(area);

        // WebVolanoChat.setColorsAndFont(this, value);
        // field.setMacros(WebVolanoChat.getMacros(value));

        area.setEditable(false);
        field.setEditable(true);
        field.setEnabled(true);
        area.setEnabled(true);
        setLayout(new BorderLayout());
        add("Center", area);
        add("South", field);
        add("North", focus);
        pack();

        Theme.setTheme(this, value.getTheme(Theme.DEFAULT));
    }


    /**
     *  Transmits <CODE>WINDOW_DESTROY</CODE> events to the controller.
     *  <P>If the given event is a <CODE>WINDOW_DESTROY</CODE>, it is
     *  passed on to the controller component.  Otherwise, this method
     *  invokes the default <CODE>handleEvent</CODE> method.
     *
     *  @param ev  An event object.
     */
    public boolean handleEvent(Event ev) {
        if (ev.id == ev.WINDOW_DESTROY) {
            ev.target = this;
            controller.postEvent(ev);
            return true;
        }
        return super.handleEvent(ev);
    }


    /**
     *  Processes action events.
     *  <P>If the action event was generated by the text field, and the room
     *  is still open, this method transmits the action event to the
     *  controller component.
     *
     *  @param ev    The action event.
     *  @param what  Ignored.
     */
    public boolean action(Event ev, Object what) {
        if ((ev.target == field) && open) {
            String text = field.getText().trim();
            if (text.length() > 0) {
                ev.target = this;
                controller.postEvent(ev);
            }
            return true;
        }
        return false;
    }


    /**
     *  Invoked when a key is pressed.
     *  <P>This method handles tab and shift-tab.
     *
     *  @param event The event object
     *  @param key   The code of the pressed key.
     */
    public boolean keyDown(Event event, int key) {
        boolean handled = false;
        if (key == Build.TAB) {
            if (event.shiftDown()) {
                focus.previous();
            } else {
                focus.next();
            }
            handled = true;
        } else if (key == Build.NEW_LINE || key == Build.RETURN) {
            postEvent(new Event(field, Event.ACTION_EVENT, ""));
            handled = true;
        }
        return handled;
    }


    /**
     *  Returns the username of the other user in this private chat room.
     *
     *  @return the username of the other user in this private chat room.
     */
    public String getUsername() {
        return username;
    }


    /**
     *  Sets the username of the user in this private chat room.
     *
     *  @param s  The new username of the user in this private chat room.
     */
    public void setUsername(String s) {
        username = s;
    }


    /**
     *  Returns the unique id of this private chat room.
     *
     *  @return the unique id of this private chat room.
     */
    public int getRoomId() {
        return roomId;
    }


    /**
     *  Sets the unique id of this private chat room.
     *
     *  @param i  The new unique id of this private chat room.
     */
    public void setRoomId(int i) {
        roomId = i;
    }


    /**
     *  Sets whether or not this private chat room is open.
     *
     *  @param b  <CODE>true</CODE> if this private chat room is open.
     */
    public void setOpen(boolean b) {
        open = b;
    }


    /**
     *  Returns whether or not this private chat room is open.
     *
     *  @return <CODE>true</CODE> if this private chat room is open.
     */
    public boolean isOpen() {
        return open;
    }

    /**
     * Substitutes each character defined by the <code>chat.replace.old</code>
     * property with its corresponding character in the
     * <code>char.replace.new</code> property.
     *
     * @param text  the text string.
     * @return  the new text string with the substituted characters.
     */

    protected String substitute(String text) {
        // Assumes the old and new character strings are the same length.
        for (int i = 0; i < value.charReplaceOld.length(); i++) {
            text = text.replace(value.charReplaceOld.charAt(i), value.charReplaceNew.charAt(i));
        }
        return text;
    }

    /**
     *  Appends chat text from the given user to this private chat room.
     *
     *  @param user  The user sending the chat text.
     *  @param text  The chat text.
     */
    public void appendChatText(String user, String text) {
        area.append("<" + user + "> " + substitute(text));
    }


    /**
     *  Appends chat text from the user to this private chat room.
     *
     *  @param text The chat text.
     */
    public void appendChatText(String text) {
        area.append("> " + substitute(text));
    }


    /**
     *  Appends broadcast text to this private chat room.
     *
     *  @param text  The broadcast text.
     */
    public void append(String text) {
        area.append(substitute(text));
    }


    /**
     *  Retrieves and clears the text in this private chat room's text field.
     *
     *  @return The text that was in the text field.
     */
    public String getChatText() {
        String result = field.getText();
        field.setText(BLANK);
        return result;
    }

}
